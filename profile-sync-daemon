#!/bin/bash
PSD_VERS="5.04"

### Arrays
# ProfileArray is transient used to store profile paths parsed from firefox from and aurora
# DIRArray is a full path corrected for both relative and absolute paths

if [[ ! -f /etc/psd.conf ]]; then
	echo "Cannot find /etc/psd.conf so bailing.  Reinstall package to use profile-sync-daemon."	# nothing to do if there is no conf file
	exit 1
else
	. /etc/psd.conf
fi

if [[ -z "$USERS" ]]; then
	echo "Must define at least one user in /etc/psd.conf"	# nothing to do if there are no users

	exit 1
fi

BROWSERS=${BROWSERS:-"chromium conkeror.mozdev.org firefox google-chrome heftig-aurora midori opera opera-next qupzilla"} # all supported browsers

[[ -z "$VOLATILE" ]] && VOLATILE="/tmp"

DAEMON_FILE=${DAEMON_FILE:-"/run/psd"}	# make it overrideable from the commandline / config

root_check() {
	# we call this to ensure that only the root user is calling the function
	# why care? both the sync and unsync functions require root access to /run/psd (the pseudo pid file)
	# running as unprivileged user will fuck up the sync process resulting in unhappy users

	if [[ $EUID -ne 0 ]]; then
		echo "This function must be called as root!" 1>&2
		exit 1
	fi
}

set_which() {
	local user=$1
	local browser=$2

	homedir="$(getent passwd $user | cut -d: -f6)"
	group="$(stat -c %G $homedir)"

	# reset global variables and arrays
	unset ProfileArray DIRArray
	PSNAME=
	BACKUP=
	DIR=

	# skip homeless users
	if [[ -z $homedir ]]; then
		return
	fi

	case "$browser" in
		chromium|midori)
			DIRArray[0]="$homedir/.config/$browser"
			PSNAME="$browser"
			;;
		google-chrome)
			DIRArray[0]="$homedir/.config/$browser"
			PSNAME="chrome"
			;;
		firefox)
			# build DIRArrayy
			if [[ -d $homedir/.mozilla/firefox ]]; then
				profileArr=( $(grep '[P,p]'ath= $homedir/.mozilla/firefox/profiles.ini|sed 's/[P,p]ath=//') )
				index=0
				PSNAME="$browser"
				for profileItem in ${profileArr[@]}; do
					if [[ $(echo $profileItem | cut -c1) = "/" ]]; then
						DIRArray[index]="$profileItem"	# path is not relative
					else
						DIRArray[index]="$homedir/.mozilla/firefox/$profileItem"	# we need to append the default path to give a fully qualified path
					fi
					index=$index+1
				done
			fi
			;;
		heftig-aurora)
			# https://bbs.archlinux.org/viewtopic.php?id=117157
			# build DIRArray
			if [[ -d $homedir/.mozilla/aurora ]]; then
				profileArr=( $(grep '[P,p]'ath= $homedir/.mozilla/aurora/profiles.ini|sed 's/[P,p]ath=//') )
				index=0
				PSNAME="aurora"
				for profileItem in ${profileArr[@]}; do
					if [[ $(echo $profileItem | cut -c1) = "/" ]]; then
						DIRArray[index]="$profileItem"	# path is not relative
					else
						DIRArray[index]="$homedir/.mozilla/aurora/$profileItem"	# we need to append the default path to give a fully qualified path
					fi
					index=$index+1
				done
			fi
			;;
		opera|opera-next|qupzilla)
			DIRArray[0]="$homedir/.$browser"
			PSNAME="$browser"
			;;
		conkeror.mozdev.org)
			DIRArray[0]="$homedir/.$browser"
			PSNAME="xulrunner"
			;;
		*)
			# skip invalid browser entries
			return
	esac
}

refuse_to_start() {
	# check for browsers running and kill them to safely sync
	# without this cannot guarantee profile integrity
	local browser user
	for user in $USERS; do
		for browser in $BROWSERS; do
			set_which "$user" "$browser"
			if [[ -n $PSNAME ]] && pgrep -u "$user" "$PSNAME" &>/dev/null; then
				echo "Refusing to start since $browser is running by $user"
				echo "Exit this before starting the deamon to avoid data loss!"
				exit 1
			else
				/bin/true
			fi
		done
	done
}

kill_browsers() {
	# check for browsers running and kill them to safely sync
	# without this cannot guarantee profile integrity
	local browser user
	for user in $USERS; do
		for browser in $BROWSERS; do
			set_which "$user" "$browser"

			x=1
			while [[ $x -le 5 ]]; do
				if [[ -n $(pgrep -u $user $PSNAME) ]]; then
					pkill -SIGTERM -u $user $PSNAME
				else
					/bin/true
				fi
				x=$(( $x + 1 ))
			done
			### Do we need a secondary, more powerful method of killing if the first fails?
		done
	done
	sleep 2s	# pause allowing things to settle one slow machines
}

debug() {
	echo -en "\E[31m::DEBUG MODE::"
	tput sgr0 # reset colors to normal
	echo
	echo "profile-sync-daemon version: $PSD_VERS"
	echo
	echo "settings in /etc/psd.conf will make profile-sync-daemon manage the following browers/user combos when invoked:"
	echo
	local browser user
	for user in $USERS; do
		for browser in $BROWSERS; do
			set_which "$user" "$browser"
			for item in ${DIRArray[@]}; do
				DIR="$item"
				BACKUP="$item-backup"
				[[ "$browser" = "firefox" ]] || [[ "$browser" = "heftig-aurora" ]] && suffix="-${item##*/}" || suffix=

				if [[ -d "$DIR" ]]; then
					echo "browser:psname  $browser:$PSNAME"
					echo "owner/group:    $user:$group"
					echo "sync target:    $DIR"
					echo "backup target:  $BACKUP"
					echo "tmpfs dir:      $VOLATILE/$user-$browser$suffix"
					echo
				fi
			done
		done
	done
}

check() {
	# if the machine was ungracefully shutdown then the backup will be on the filesystem
	# and the link to tmpfs will be on the filesystem but the contents will be empty
	# we need to simply remove the link and rotate the backup into place

	root_check
	local browser user suffix
	for user in $USERS; do
		for browser in $BROWSERS; do
			set_which "$user" "$browser"
			for item in ${DIRArray[@]}; do
				DIR="$item"
				BACKUP="$item-backup"
				[[ "$browser" = "firefox" ]] || [[ "$browser" = "heftig-aurora" ]] && suffix="-${item##*/}" || suffix=

				if [[ -e "$DIR/.flagged" ]]; then # all is well so continue
					/bin/true
				else
					[[ -h "$DIR" ]] && unlink "$DIR"
					[[ -d "$BACKUP" ]] && mv "$BACKUP" "$DIR"
				fi
			done
		done
	done
}

sync() {
	root_check	# used to check if psd is active

	touch "$DAEMON_FILE"

	# sync profiles to tmpfs and back again
	local browser user
	for user in $USERS; do
		for browser in $BROWSERS; do
			set_which "$user" "$browser"
			for item in ${DIRArray[@]}; do
				DIR="$item"
				BACKUP="$item-backup"
				[[ "$browser" = "firefox" ]] || [[ "$browser" = "heftig-aurora" ]] && suffix="-${item##*/}" || suffix=

				# make tmpfs container
				if [[ -d $DIR ]]; then
					[[ -r "$VOLATILE/$user-$browser$suffix" ]] || install -dm755 --owner=$user --group=$group "$VOLATILE/$user-$browser$suffix"

					# backup target and link to tmpfs container
					if [[ $(readlink "$DIR") != "$VOLATILE/$user-$browser$suffix" ]]; then
						mv "$DIR" "$BACKUP"
						ln -s "$VOLATILE/$user-$browser$suffix" "$DIR"
						chown -h $user:$group "$DIR"
					fi

					# sync the tmpfs targets to the disc
					if [[ -e $DIR/.flagged ]]; then
						rsync -aog --delete-after --delay-updates --exclude .flagged "$DIR/" "$BACKUP/"
					else
						rsync -aog --delay-updates "$BACKUP/" "$DIR/"
						touch "$DIR/.flagged"
					fi
				fi
			done
		done
	done
}

unsync() {
	root_check

	# remove daemon state indicator file
	rm -f "$DAEMON_FILE"

	# restore virgin state of profiles on physical discs
	local browser user
	for user in $USERS; do
		for browser in $BROWSERS; do
			set_which "$user" "$browser"
			for item in ${DIRArray[@]}; do
				DIR="$item"
				BACKUP="$item-backup"
				[[ "$browser" = "firefox" ]] || [[ "$browser" = "heftig-aurora" ]] && suffix="-${item##*/}" || suffix=

				# check if user has browser profile
				if [[ -h "$DIR" ]]; then
					unlink "$DIR"
					# this assumes that the backup is always updated so be sure to invoke a sync
					# before an unsync
					#
					# restore original dirtree
					[[ -d "$BACKUP" ]] && mv "$BACKUP" "$DIR"
					[[ -d "$VOLATILE/$user-$browser$suffix" ]] && rm -rf "$VOLATILE/$user-$browser$suffix"
				fi
			done
		done
	done
}

case "$1" in
	debug)
		debug
		;;
	sync)
		[[ ! -f $DAEMON_FILE ]] && refuse_to_start && check 
		sync
		;;
	resync)
		[[ -f $DAEMON_FILE ]] && sync
		;;
	unsync)
		# make sure the daemon is running
		[[ -f $DAEMON_FILE ]] && sync && kill_browsers && unsync
		;;
	*) 
		echo -en "\E[31musage: "
		tput sgr0 # reset colors to normal
		echo "$0 {sync|unsync|debug}"
		echo "  sync) Force a manual sync."
		echo "unsync) Force a manual unsync."
		echo " debug) Parse config file to make sure vars are correctly defined."
		;;
esac
exit 0
